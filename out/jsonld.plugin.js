// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var JsonldPlugin, _ref;
  return JsonldPlugin = (function(_super) {
    __extends(JsonldPlugin, _super);

    function JsonldPlugin() {
      _ref = JsonldPlugin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    JsonldPlugin.prototype.name = 'jsonld';

    JsonldPlugin.prototype.config = {
      map: {
        date: 'http://purl.org/dc/elements/1.1/date',
        title: 'http://purl.org/dc/elements/1.1/title',
        tags: 'http://purl.org/dc/elements/1.1/subject'
      }
    };

    JsonldPlugin.prototype.buildJson = function(document, map) {
      var ldobject, property, uri;
      ldobject = {
        '@id': document.get('url'),
        '@context': {}
      };
      for (property in map) {
        uri = map[property];
        ldobject[property] = document.get(property);
        ldobject['@context'][property] = uri;
      }
      return ldobject;
    };

    JsonldPlugin.prototype.writeAfter = function(opts, next) {
      var TaskGroup, addWriteTask, buildJson, config, database, getJsonContent, pathUtil, safefs, tasks;
      config = this.config;
      database = docpad.getCollection('html');
      TaskGroup = require('taskgroup').TaskGroup;
      safefs = require('safefs');
      pathUtil = require('path');
      buildJson = this.buildJson;
      getJsonContent = function(document) {
        return JSON.stringify(buildJson(document, config.map), null, 4);
      };
      tasks = new TaskGroup().setConfig({
        concurrency: 0
      }).once('complete', function(err) {
        docpad.log('debug', 'Wrote static clean url files');
        return next(err);
      });
      addWriteTask = function(outPath, outContent, encoding) {
        return tasks.addTask(function(complete) {
          return safefs.writeFile(outPath, outContent, encoding, complete);
        });
      };
      database.forEach(function(document) {
        var ext, jsonOutPath, primaryOutPath, primaryUrl;
        if (document.get('write') === false || document.get('ignore') === true || document.get('render') === false) {
          return;
        }
        primaryUrl = document.get('url');
        primaryOutPath = document.get('outPath');
        ext = pathUtil.extname(primaryOutPath);
        jsonOutPath = pathUtil.join(pathUtil.dirname(primaryOutPath), pathUtil.basename(primaryOutPath, ext)) + '.jsonld';
        return addWriteTask(jsonOutPath, getJsonContent(document), document.get('encoding'));
      });
      tasks.run();
      return next();
    };

    return JsonldPlugin;

  })(BasePlugin);
};
